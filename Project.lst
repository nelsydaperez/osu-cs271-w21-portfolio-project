Microsoft (R) Macro Assembler Version 14.28.29337.0	    03/16/21 16:16:44
<Sum and average calculator using low level I/O procedures    Page 1 - 1


				TITLE Sum and average calculator using low level I/O procedures    (Proj6_pereznel.asm)

				; Author: Nelsyda Perez
				; Last Modified: 3/14/2021
				; OSU email address: pereznel@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: 3/14/2021
				; Description:  A program that takes 10 32-bit signed integers as user inputted strings and 
				;               uses low level I/O to print out the valid inputs, the sum of all valid inputs
				;               and the average (rounded down) of all valid inputs.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; -------------------------- 
				; Macro definitions
				; -------------------------- 
				; --------------------------------------------------------------------------------- 
				; Name: mGetString 
				; 
				; Prompts the user for a signed integer value that will be stored as a string. Will also output
				; the number of characters inputted by the user.
				; 
				; Preconditions: Do not use EAX, ECX and EDX as arguments 
				; 
				; Receives: 
				;   prompt            =  address of string containing the prompt for user input
				;   userKeyboardInput =  address of string where user input will be stored
				;   maximumCharacters =  maximum number of characters to be accepted as user input
				;   numberOfBytesRead =  variable that will take the numberOfBytesRead
				; 
				; Returns: 
				;   userKeyboardInput =  Address of user inputted string
				;   numberOfBytesRead =  The number of BYTES read by the macro
				; ---------------------------------------------------------------------------------
				mGetString MACRO prompt:REQ, userKeyboardInput:REQ, maximumCharacters:REQ, numberOfBytesRead:REQ
				  
				  ; Store used registers to preserve old values
				    PUSH  EDX
				    PUSH  ECX
				    PUSH  EBX
				    PUSH  EAX

				  ; Prompt the user
				    mDisplayString prompt

				  ; Get user inputted string
				    MOV   EDX, userKeyboardInput
				    MOV   ECX, maximumCharacters
				    CALL  ReadString

				  ; Store number of BYTES read into the output
				    MOV   EBX, numberOfBytesRead
				    MOV   [EBX], EAX

				  ; Restore original values of used registers
				    POP   EAX
				    POP   EBX
				    POP   ECX
				    POP   EDX

				ENDM

				; --------------------------------------------------------------------------------- 
				; Name: mDisplayString
				; 
				; Displays the string stored in a specified memory location.
				; 
				; Preconditions: Do not use EDX as the argument.
				; 
				; Receives: 
				;   inputString =  address of string to display
				; 
				; Returns: None
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO inputString:REQ

				  ; Preserve original values of any used registers
				    PUSH  EDX

				  ; Print the string stored in address in EDX
				    MOV   EDX, inputString
				    CALL  WriteString

				  ; Restore original values of any used registers
				    POP   EDX

				ENDM


				; -------------------------- 
				; Constant definitions
				; -------------------------- 
 = 0000000A			NUMBER_OF_ELEMENTS = 10  ; Number of valid inputs that the program will accept from the user
 = 0000000D			MAX_INPUT_SIZE = 13      ; Accepts 12 characters (plus 1 for the trailing 0 character at the end of a string)


				; -------------------------- 
				; Data variables
				; -------------------------- 
 00000000			.data
				    
				  ; Project title and program introductions/descriptions
 00000000 53 75 6D 20 61	    projectTitle        BYTE    "Sum and average calculator using low level I/O procedures, by Nelsyda Perez",10,10,0
	   6E 64 20 61 76
	   65 72 61 67 65
	   20 63 61 6C 63
	   75 6C 61 74 6F
	   72 20 75 73 69
	   6E 67 20 6C 6F
	   77 20 6C 65 76
	   65 6C 20 49 2F
	   4F 20 70 72 6F
	   63 65 64 75 72
	   65 73 2C 20 62
	   79 20 4E 65 6C
	   73 79 64 61 20
	   50 65 72 65 7A
	   0A 0A 00
 0000004E 50 6C 65 61 73	    intro               BYTE    "Please enter 10 signed integers small enough to fit in a 32-bit register. "
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   73 20 73 6D 61
	   6C 6C 20 65 6E
	   6F 75 67 68 20
	   74 6F 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 20
 00000098  49 20 77 69 6C	                        BYTE    "I will print display all valid entries, their sum and average (rounded down).",10,10,0
	   6C 20 70 72 69
	   6E 74 20 64 69
	   73 70 6C 61 79
	   20 61 6C 6C 20
	   76 61 6C 69 64
	   20 65 6E 74 72
	   69 65 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 20 28 72 6F
	   75 6E 64 65 64
	   20 64 6F 77 6E
	   29 2E 0A 0A 00

				  ; Error message
 000000E8 45 52 52 4F 52	    error               BYTE    "ERROR: You did not enter an signed number or your number was too big.",10
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0A
 0000012E  50 6C 65 61 73	                        BYTE    "Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

				  ; Variables used to store user inputs
 00000141 50 6C 65 61 73	    userInputPrompt     BYTE      "Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000161  0000000D [		    userInputString     BYTE      MAX_INPUT_SIZE  DUP(0)
	    00
	   ]
 0000016E 00000000		    userInputNumber     SDWORD    0
 00000172 00000000		    numberOfCharacters  DWORD     ?
 00000176  0000000A [		    inputArray          SDWORD    NUMBER_OF_ELEMENTS  DUP(?)
	    00000000
	   ]
 0000019E 00000000		    sumOfNumbers        SDWORD    0
 000001A2 00000000		    average             SDWORD    0

				  ; User outputs
 000001A6 59 6F 75 20 65	    numberListPrompt    BYTE      "You entered the following numbers:",10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0A
	   00
 000001CA 54 68 65 20 73	    sumPrompt           BYTE      "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001E8 54 68 65 20 61	    averagePrompt       BYTE      "The average of these numbers is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 73 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 0000020A  0000000D [		    outputString        BYTE      MAX_INPUT_SIZE  DUP(0)
	    00
	   ]
 00000217 2C 20 00		    commaSeparator      BYTE      44,32,0

				  ; Goodbye message
 0000021A 59 6F 75 72 20	    goodbye             BYTE      "Your business is appreciated. Thank you and goodbye.",10,10,0
	   62 75 73 69 6E
	   65 73 73 20 69
	   73 20 61 70 70
	   72 65 63 69 61
	   74 65 64 2E 20
	   54 68 61 6E 6B
	   20 79 6F 75 20
	   61 6E 64 20 67
	   6F 6F 64 62 79
	   65 2E 0A 0A 00


 00000000			.code
 00000000			main PROC

				  ; -------------------------- 
				  ; Displays program title and description for the end user
				  ; -------------------------- 
				    mDisplayString OFFSET projectTitle
 00000000  52		     1	    PUSH  EDX
 00000001  BA 00000000 R     1	    MOV   EDX, OFFSET projectTitle
 00000006  E8 00000000 E     1	    CALL  WriteString
 0000000B  5A		     1	    POP   EDX
				    mDisplayString OFFSET intro
 0000000C  52		     1	    PUSH  EDX
 0000000D  BA 0000004E R     1	    MOV   EDX, OFFSET intro
 00000012  E8 00000000 E     1	    CALL  WriteString
 00000017  5A		     1	    POP   EDX


				  ; -------------------------- 
				  ; Gets 10 32-bit signed integers from the user using ReadVal
				  ;     and updates the inputArray every time a valid entry has been
				  ;     provided by the user. The program also updates the running sum of
				  ;     all numbers.
				  ; -------------------------- 
				  ; Preserve original value of used registers
 00000018  51			    PUSH  ECX
 00000019  57			    PUSH  EDI

				  ; Initialize counter and have EDI point to inputArray address
 0000001A  B9 0000000A		    MOV   ECX, NUMBER_OF_ELEMENTS
 0000001F  BF 00000176 R	    MOV   EDI, OFFSET inputArray
				  
				  ; Loop to prompt user NUMBER_OF_ELEMENTS amount of times
 00000024			  _getUserInputLoop:

 00000024  68 00000141 R	    PUSH  OFFSET userInputPrompt     ; address of prompt asking for user input
 00000029  68 000000E8 R	    PUSH  OFFSET error               ; error message for invalid input
 0000002E  68 00000161 R	    PUSH  OFFSET userInputString     ; address where user inputted string is stored
 00000033  6A 0D		    PUSH  MAX_INPUT_SIZE             ; maximum character limit for user inputted string
 00000035  68 00000172 R	    PUSH  OFFSET numberOfCharacters  ; number of characters inputted by the user
 0000003A  57			    PUSH  EDI                        ; address where user inputted number will be stored on the array
 0000003B  E8 000000D0		    CALL  ReadVal

				  ; Add current number to running sum
 00000040  8B 07		    MOV   EAX, [EDI]
 00000042  01 05 0000019E R	    ADD   sumOfNumbers, EAX

 00000048  83 C7 04		    ADD   EDI, 4  ; Update EDI to point to next element in the inputArray

 0000004B  E2 D7		    LOOP  _getUserInputLoop

				  ; Add a line break at the end of the user input
 0000004D  E8 00000000 E	    CALL  Crlf

				  ; Restore used registers
 00000052  5F			    POP   EDI
 00000053  59			    POP   ECX


				  ; -------------------------- 
				  ; Calculate the average value of all user inputs using the CalculateAverage
				  ;     procedure, the sum of all numbers and the number of elements we requested
				  ;     from the user.
				  ; -------------------------- 
 00000054  FF 35 0000019E R	    PUSH  sumOfNumbers
 0000005A  6A 0A		    PUSH  NUMBER_OF_ELEMENTS
 0000005C  68 000001A2 R	    PUSH  OFFSET average
 00000061  E8 000001CF		    CALL  CalculateAverage


				  ; -------------------------- 
				  ; Display a list of all valid numbers inputted by the user, separated by a comma
				  ; -------------------------- 
				  ; Display prompt
				    mDisplayString OFFSET numberListPrompt
 00000066  52		     1	    PUSH  EDX
 00000067  BA 000001A6 R     1	    MOV   EDX, OFFSET numberListPrompt
 0000006C  E8 00000000 E     1	    CALL  WriteString
 00000071  5A		     1	    POP   EDX
				  
				  ; Preserve original value of used registers
 00000072  51			    PUSH  ECX
 00000073  56			    PUSH  ESI

				  ; Initialize counter and have ESI point to inputArray address
 00000074  B9 0000000A		    MOV   ECX, NUMBER_OF_ELEMENTS
 00000079  BE 00000176 R	    MOV   ESI, OFFSET inputArray

				  ; Loop through ESI and display every number in the input array
 0000007E			  _displayUserInputLoop:
 0000007E  FF 36		    PUSH  [ESI]
 00000080  68 0000020A R	    PUSH  OFFSET outputString  ; address where outputString will be stored
 00000085  E8 00000147		    CALL  WriteVal

 0000008A  83 F9 01		    CMP   ECX, 1
 0000008D  74 0F		    JE    _finished
				    mDisplayString OFFSET commaSeparator  ; Adds a comma as a separator between numbers
 0000008F  52		     1	    PUSH  EDX
 00000090  BA 00000217 R     1	    MOV   EDX, OFFSET commaSeparator
 00000095  E8 00000000 E     1	    CALL  WriteString
 0000009A  5A		     1	    POP   EDX

 0000009B  83 C6 04		    ADD   ESI, 4

 0000009E			  _finished:  ; Last element has been printed

 0000009E  E2 DE		    LOOP  _displayUserInputLoop

				  ; Print out line breaks
 000000A0  E8 00000000 E	    CALL  Crlf
 000000A5  E8 00000000 E	    CALL  Crlf

				  ; Restore used registers
 000000AA  5E			    POP   ESI
 000000AB  59			    POP   ECX


				  ; -------------------------- 
				  ; Display the sum of all user-inputted numbers
				  ; -------------------------- 
				    mDisplayString OFFSET sumPrompt
 000000AC  52		     1	    PUSH  EDX
 000000AD  BA 000001CA R     1	    MOV   EDX, OFFSET sumPrompt
 000000B2  E8 00000000 E     1	    CALL  WriteString
 000000B7  5A		     1	    POP   EDX
 000000B8  FF 35 0000019E R	    PUSH   sumOfNumbers
 000000BE  68 0000020A R	    PUSH   OFFSET outputString
 000000C3  E8 00000109		    CALL   WriteVal

				  ; Print out line breaks
 000000C8  E8 00000000 E	    CALL   Crlf
 000000CD  E8 00000000 E	    CALL   Crlf


				  ; -------------------------- 
				  ; Display the average of all user-inputted numbers
				  ; -------------------------- 
				    mDisplayString OFFSET averagePrompt
 000000D2  52		     1	    PUSH  EDX
 000000D3  BA 000001E8 R     1	    MOV   EDX, OFFSET averagePrompt
 000000D8  E8 00000000 E     1	    CALL  WriteString
 000000DD  5A		     1	    POP   EDX
 000000DE  FF 35 000001A2 R	    PUSH   average
 000000E4  68 0000020A R	    PUSH   OFFSET outputString
 000000E9  E8 000000E3		    CALL   WriteVal

				  ; Print out line breaks
 000000EE  E8 00000000 E	    CALL   Crlf
 000000F3  E8 00000000 E	    CALL   Crlf
 000000F8  E8 00000000 E	    CALL   Crlf


				  ; -------------------------- 
				  ; Display goodbye message
				  ; -------------------------- 
				    mDisplayString OFFSET goodbye
 000000FD  52		     1	    PUSH  EDX
 000000FE  BA 0000021A R     1	    MOV   EDX, OFFSET goodbye
 00000103  E8 00000000 E     1	    CALL  WriteString
 00000108  5A		     1	    POP   EDX


					Invoke ExitProcess,0	; exit to operating system
 00000109  6A 00	   *	    push   +000000000h
 0000010B  E8 00000000 E   *	    call   ExitProcess
 00000110			main ENDP


				; --------------------------------------------------------------------------------- 
				; Name: ReadVal
				;  
				; Reads a string, converts the string into a 32-bit signed integer and stores the value into
				; memory.
				; 
				; Preconditions: None
				; 
				; Postconditions: May increment the ECX register if value is invalid.
				; 
				; Receives:
				;   [EBP+28] =  address of prompt asking user to make an input
				;   [EBP+24] =  address of error message
				;   [EBP+20] =  address of string inputted by the user
				;   [EBP+16] =  maximum number of characters the user can input
				;   [EBP+12] =  address of number of characters in user input string
				;   [EBP+8]  =  address of user inputted number
				;
				; 
				; Returns:
				;   [EBP+8]  =  User input as a 32-bit signed integer stored at this address
				;   
				; --------------------------------------------------------------------------------- 
 00000110			ReadVal PROC

				  ; Preserve the position of EBP to allow for referencing of passed parameters
 00000110  55			    PUSH  EBP
 00000111  8B EC		    MOV   EBP, ESP

				  ; Push used registers to the stack in order to preserve their original values
 00000113  51			    PUSH  ECX
 00000114  56			    PUSH  ESI
 00000115  52			    PUSH  EDX
 00000116  53			    PUSH  EBX
 00000117  50			    PUSH  EAX

				  ; Get user input using the mGetString macro
				    mGetString [EBP+28], [EBP+20], [EBP+16], [EBP+12]
 00000118  52		     1	    PUSH  EDX
 00000119  51		     1	    PUSH  ECX
 0000011A  53		     1	    PUSH  EBX
 0000011B  50		     1	    PUSH  EAX
 0000011C  52		     2	    PUSH  EDX
 0000011D  8B 55 1C	     2	    MOV   EDX, [EBP+28]
 00000120  E8 00000000 E     2	    CALL  WriteString
 00000125  5A		     2	    POP   EDX
 00000126  8B 55 14	     1	    MOV   EDX, [EBP+20]
 00000129  8B 4D 10	     1	    MOV   ECX, [EBP+16]
 0000012C  E8 00000000 E     1	    CALL  ReadString
 00000131  8B 5D 0C	     1	    MOV   EBX, [EBP+12]
 00000134  89 03	     1	    MOV   [EBX], EAX
 00000136  58		     1	    POP   EAX
 00000137  5B		     1	    POP   EBX
 00000138  59		     1	    POP   ECX
 00000139  5A		     1	    POP   EDX
 0000013A  EB 26		    JMP   _firstRun
				  
 0000013C			  _invalidInputOverflow:
 0000013C  5A			    POP   EDX
 0000013D  5B			    POP   EBX
 0000013E  58			    POP   EAX

 0000013F			  _invalidInput:
 0000013F  59			    POP   ECX
				  ; Get user input using mGetString, if the input was invalid
				    mGetString [EBP+24], [EBP+20], [EBP+16], [EBP+12]
 00000140  52		     1	    PUSH  EDX
 00000141  51		     1	    PUSH  ECX
 00000142  53		     1	    PUSH  EBX
 00000143  50		     1	    PUSH  EAX
 00000144  52		     2	    PUSH  EDX
 00000145  8B 55 18	     2	    MOV   EDX, [EBP+24]
 00000148  E8 00000000 E     2	    CALL  WriteString
 0000014D  5A		     2	    POP   EDX
 0000014E  8B 55 14	     1	    MOV   EDX, [EBP+20]
 00000151  8B 4D 10	     1	    MOV   ECX, [EBP+16]
 00000154  E8 00000000 E     1	    CALL  ReadString
 00000159  8B 5D 0C	     1	    MOV   EBX, [EBP+12]
 0000015C  89 03	     1	    MOV   [EBX], EAX
 0000015E  58		     1	    POP   EAX
 0000015F  5B		     1	    POP   EBX
 00000160  59		     1	    POP   ECX
 00000161  5A		     1	    POP   EDX

 00000162			  _firstRun:

				  ; Initialize the counter variable
 00000162  8B 5D 0C		    MOV   EBX, [EBP+12]
 00000165  8B 0B		    MOV   ECX, [EBX]
 00000167  51			    PUSH  ECX

 00000168  8B 75 14		    MOV   ESI, [EBP+20]  ; Point ESI to the user inputted string address
 0000016B  8B 55 08		    MOV   EDX, [EBP+8]   ; Point EDX to the address where the converted SDWORD will be stored
 0000016E  B8 00000000		    MOV   EAX, 0         ; Clear the EAX register prior to using
 00000173  89 02		    MOV   [EDX], EAX     ; Clear the stored at the address stored in EDX prior to using
 00000175  FC			    CLD                  ; Clear direction flag to increment ESI after every LODSB

 00000176			  _loopThroughInputString:
 00000176  B8 00000000		    MOV   EAX, 0
 0000017B  AC			    LODSB
 0000017C  3B 0C 24		    CMP   ECX, [ESP]
 0000017F  75 13		    JNE   _notFirstCharacter

 00000181  BB 00000000		    MOV   EBX, 0
 00000186  3C 2D		    CMP   AL, '-'
 00000188  74 04		    JE    _signed
 0000018A  3C 2B		    CMP   AL, '+'
 0000018C  75 04		    JNE   _notSigned  ; No sign was typed by the user. Assumed to be positive
				  
 0000018E			  _signed:
 0000018E  8A D8		    MOV   BL, AL
 00000190  EB 33		    JMP   _validInput

 00000192			  _notSigned:
 00000192  B3 00		    MOV   BL, 0

 00000194			  _notFirstCharacter:
				    
 00000194  3C 30		    CMP   AL, 48
 00000196  72 A7		    JB    _invalidInput
 00000198  3C 39		    CMP   AL, 57
 0000019A  77 A3		    JA    _invalidInput
 0000019C  2C 30		    SUB   AL, 48
				   
				  ; Store number in user inputted number
 0000019E  50			    PUSH  EAX
 0000019F  53			    PUSH  EBX
 000001A0  52			    PUSH  EDX
 000001A1  8B 02		    MOV   EAX, [EDX]
 000001A3  BB 0000000A		    MOV   EBX, 10
 000001A8  F7 EB		    IMUL  EBX

 000001AA  70 90		    JO    _invalidInputOverflow  ; If overflow occurs, the number was too big to be stored into a 32-bit register

 000001AC  5A			    POP   EDX
 000001AD  5B			    POP   EBX

 000001AE  89 02		    MOV   [EDX], EAX
 000001B0  58			    POP   EAX

				  ; Check if the user provided a sign at the beginning
 000001B1  80 FB 2D		    CMP   BL, '-'
 000001B4  74 07		    JE    _negative
 000001B6  80 FB 2B		    CMP   BL, '+'

 000001B9  01 02		    ADD   [EDX], EAX
 000001BB  EB 02		    JMP   _positive

 000001BD			  _negative:
 000001BD  29 02		    SUB   [EDX], EAX

 000001BF			  _positive:
				  
 000001BF  0F 80 FFFFFF7A	    JO    _invalidInput  ; If overflow occurs, the number was too big to be stored into a 32-bit register

 000001C5			  _validInput:
 000001C5  E2 AF		    LOOP  _loopThroughInputString
				    
				  ; Restore original register states
 000001C7  59			    POP   ECX
 000001C8  58			    POP   EAX
 000001C9  5B			    POP   EBX
 000001CA  5A			    POP   EDX
 000001CB  5E			    POP   ESI
 000001CC  59			    POP   ECX
 000001CD  5D			    POP   EBP

 000001CE  C2 0018		  RET  24     ; return to main
 000001D1			ReadVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: WriteVal
				;  
				; Converts a signed 32-bit signed integer into a string of ASCII digits, then invokes the 
				; mDisplayString to display the string to the output.
				; 
				; Preconditions: None
				; 
				; Postconditions: Modifies the DF 
				; 
				; Receives:
				;   [EBP+12] =  Value of the 32-bit signed integer that will be displayed
				;   [EBP+8]  =  Address of output string that will be generated for the inputted number
				; 
				; Returns:  
				;   [EBP+8]  =  String containing the value of the integer
				; --------------------------------------------------------------------------------- 
 000001D1			WriteVal PROC

				  ; Preserve the position of EBP to allow for referencing of passed parameters
 000001D1  55			    PUSH  EBP
 000001D2  8B EC		    MOV   EBP, ESP

				  ; Push used registers to the stack in order to preserve their original values
 000001D4  51			    PUSH  ECX
 000001D5  57			    PUSH  EDI
 000001D6  52			    PUSH  EDX
 000001D7  53			    PUSH  EBX
 000001D8  50			    PUSH  EAX

 000001D9  8B 7D 08		    MOV   EDI, [EBP+8]   ; Point EDI to the user inputted string address
 000001DC  83 C7 0B		    ADD   EDI, 11        ; Point EDI to the second-to-last character on the string
 000001DF  FD			    STD                  ; EDI will move backwards

 000001E0  B9 0000000C		    MOV   ECX, 12        ; Maximum number of characters for a string containing the largest possible SWORD
				    
 000001E5  8B 45 0C		    MOV   EAX, [EBP+12]

				  ; Check if a negative sign is required
 000001E8  BB 00000000		    MOV   EBX, 0
 000001ED  83 F8 00		    CMP   EAX, 0
 000001F0  7D 04		    JGE   _getCharacter
 000001F2  B3 2D		    MOV   BL, '-'
 000001F4  F7 D8		    NEG   EAX

 000001F6			  _getCharacter:
 000001F6  53			    PUSH  EBX       ; Store value of EBX (may contain a negative sign)

 000001F7  BB 0000000A		    MOV   EBX, 10   ; Divisor
 000001FC  BA 00000000		    MOV   EDX, 0    ; Clear EDX before using DIV (remanider stored here)
 00000201  F7 F3		    DIV   EBX       ; Divide EAX by 10

 00000203  5B			    POP   EBX       ; Restore value of EBX

 00000204  50			    PUSH  EAX       ; Store EAX value (contains quotient)
 00000205  8B C2		    MOV   EAX, EDX  ; Store remainder (which contains the value of the digit in EAX)
 00000207  83 C0 30		    ADD   EAX, 48   ; Convert digit to its ASCII value
 0000020A  AA			    STOSB           ; Store character in string within EDI

 0000020B  58			    POP   EAX       ; Restore EAX value from division

				  ; Check to see if last digit has been accounted for (EAX = 0 if it is)
 0000020C  83 F8 00		    CMP   EAX, 0
 0000020F  75 05		    JNE   _continue
 00000211  B9 00000001		    MOV   ECX, 1     ; Change counter to 1 to end the loop

 00000216			  _continue:         ; Skip modifying the counter and continue looping through the string
				    
 00000216  E2 DE		    LOOP  _getCharacter

				  ; Upon exit, EDI is pointing at an address 4 BYTES backwards from the beginning of the string

				  ; Check if the number was negative
 00000218  80 FB 2D		    CMP   BL, '-'
 0000021B  75 03		    JNE   _noSign
 0000021D  8A C3		    MOV   AL, BL   ; Store negative sign to AL register
 0000021F  AA			    STOSB          ; Add the negative sign to the string
				  
 00000220			  _noSign:         ; Jump provided to skip adding the sign if there is none

 00000220  83 C7 01		    ADD   EDI, 1   ; Move pointer back to the beginning of the string

				  ; Display the generated string
				    mDisplayString EDI
 00000223  52		     1	    PUSH  EDX
 00000224  8B D7	     1	    MOV   EDX, EDI
 00000226  E8 00000000 E     1	    CALL  WriteString
 0000022B  5A		     1	    POP   EDX

				  ; Restore original register states
 0000022C  58			    POP   EAX
 0000022D  5B			    POP   EBX
 0000022E  5A			    POP   EDX
 0000022F  5F			    POP   EDI
 00000230  59			    POP   ECX
 00000231  5D			    POP   EBP

 00000232  C2 0008		  RET  8       ; return to main
 00000235			WriteVal ENDP


				; --------------------------------------------------------------------------------- 
				; Name: CalculateAverage
				;  
				; Calculates the average when given the sum of all numbers and the number of elements
				; rounded down (floor).
				; 
				; Preconditions: None
				; 
				; Postconditions: None
				; 
				; Receives:
				;   [EBP+16] =  The sum of all numbers
				;   [EBP+12] =  The number of elements
				;   [EBP+8]  =  Address of string where the average is stored
				; 
				; Returns:
				;   [EBP+8]  =  The calculated average of all numbers
				; --------------------------------------------------------------------------------- 
 00000235			CalculateAverage PROC

				    ; Preserve the position of EBP to allow for referencing of passed parameters
 00000235  55			    PUSH  EBP
 00000236  8B EC		    MOV   EBP, ESP

				  ; Push used registers to the stack in order to preserve their original values
 00000238  50			    PUSH  EAX
 00000239  52			    PUSH  EDX
 0000023A  53			    PUSH  EBX
 0000023B  57			    PUSH  EDI

 0000023C  8B 7D 08		    MOV   EDI, [EBP+8]   ; Store address of average output variable
				    
 0000023F  8B 45 10		    MOV   EAX, [EBP+16]  ; Dividend: Sum of all numbers
 00000242  8B 5D 0C		    MOV   EBX, [EBP+12]  ; Divisor: Total number of elements
 00000245  99			    CDQ
 00000246  F7 FB		    IDIV  EBX

 00000248  83 FA 00		    CMP   EDX, 0
 0000024B  7D 01		    JGE   _noRoundingNegative

 0000024D  48			    DEC   EAX  

 0000024E			  _noRoundingNegative:

 0000024E  89 07		    MOV   [EDI], EAX  ; Store average in address stored in EDI

				  ; Restore original register values
 00000250  5F			    POP   EDI
 00000251  5B			    POP   EBX
 00000252  5A			    POP   EDX
 00000253  58			    POP   EAX
 00000254  5D			    POP   EBP

 00000255  C2 000C		  RET   12             ; return to main
 00000258			CalculateAverage ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29337.0	    03/16/21 16:16:44
<Sum and average calculator using low level I/O procedures    Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000251 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000258 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 00000235 _TEXT	Length= 00000023 Public STDCALL
  _noRoundingNegative  . . . . .	L Near	 0000024E _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 000000C1 Public STDCALL
  _invalidInputOverflow  . . . .	L Near	 0000013C _TEXT	
  _invalidInput  . . . . . . . .	L Near	 0000013F _TEXT	
  _firstRun  . . . . . . . . . .	L Near	 00000162 _TEXT	
  _loopThroughInputString  . . .	L Near	 00000176 _TEXT	
  _signed  . . . . . . . . . . .	L Near	 0000018E _TEXT	
  _notSigned . . . . . . . . . .	L Near	 00000192 _TEXT	
  _notFirstCharacter . . . . . .	L Near	 00000194 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000001BD _TEXT	
  _positive  . . . . . . . . . .	L Near	 000001BF _TEXT	
  _validInput  . . . . . . . . .	L Near	 000001C5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001D1 _TEXT	Length= 00000064 Public STDCALL
  _getCharacter  . . . . . . . .	L Near	 000001F6 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000216 _TEXT	
  _noSign  . . . . . . . . . . .	L Near	 00000220 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000110 Public STDCALL
  _getUserInputLoop  . . . . . .	L Near	 00000024 _TEXT	
  _displayUserInputLoop  . . . .	L Near	 0000007E _TEXT	
  _finished  . . . . . . . . . .	L Near	 0000009E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT_SIZE . . . . . . . . .	Number	 0000000Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBER_OF_ELEMENTS . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averagePrompt  . . . . . . . . .	Byte	 000001E8 _DATA	
average  . . . . . . . . . . . .	DWord	 000001A2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaSeparator . . . . . . . . .	Byte	 00000217 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 000000E8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000021A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 00000176 _DATA	
intro  . . . . . . . . . . . . .	Byte	 0000004E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberListPrompt . . . . . . . .	Byte	 000001A6 _DATA	
numberOfCharacters . . . . . . .	DWord	 00000172 _DATA	
outputString . . . . . . . . . .	Byte	 0000020A _DATA	
projectTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumOfNumbers . . . . . . . . . .	DWord	 0000019E _DATA	
sumPrompt  . . . . . . . . . . .	Byte	 000001CA _DATA	
userInputNumber  . . . . . . . .	DWord	 0000016E _DATA	
userInputPrompt  . . . . . . . .	Byte	 00000141 _DATA	
userInputString  . . . . . . . .	Byte	 00000161 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
